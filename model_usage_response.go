/*
IPDetective API

IPDetective API IP bot detection and IP geolocation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emaildetective

import (
	"encoding/json"
)

// checks if the UsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageResponse{}

// UsageResponse struct for UsageResponse
type UsageResponse struct {
	RequestLimit *int32 `json:"request_limit,omitempty"`
	LookupLimit *int32 `json:"lookup_limit,omitempty"`
	RequestHits *int32 `json:"request_hits,omitempty"`
	LookupHits *int32 `json:"lookup_hits,omitempty"`
}

// NewUsageResponse instantiates a new UsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageResponse() *UsageResponse {
	this := UsageResponse{}
	return &this
}

// NewUsageResponseWithDefaults instantiates a new UsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageResponseWithDefaults() *UsageResponse {
	this := UsageResponse{}
	return &this
}

// GetRequestLimit returns the RequestLimit field value if set, zero value otherwise.
func (o *UsageResponse) GetRequestLimit() int32 {
	if o == nil || IsNil(o.RequestLimit) {
		var ret int32
		return ret
	}
	return *o.RequestLimit
}

// GetRequestLimitOk returns a tuple with the RequestLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResponse) GetRequestLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestLimit) {
		return nil, false
	}
	return o.RequestLimit, true
}

// HasRequestLimit returns a boolean if a field has been set.
func (o *UsageResponse) HasRequestLimit() bool {
	if o != nil && !IsNil(o.RequestLimit) {
		return true
	}

	return false
}

// SetRequestLimit gets a reference to the given int32 and assigns it to the RequestLimit field.
func (o *UsageResponse) SetRequestLimit(v int32) {
	o.RequestLimit = &v
}

// GetLookupLimit returns the LookupLimit field value if set, zero value otherwise.
func (o *UsageResponse) GetLookupLimit() int32 {
	if o == nil || IsNil(o.LookupLimit) {
		var ret int32
		return ret
	}
	return *o.LookupLimit
}

// GetLookupLimitOk returns a tuple with the LookupLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResponse) GetLookupLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.LookupLimit) {
		return nil, false
	}
	return o.LookupLimit, true
}

// HasLookupLimit returns a boolean if a field has been set.
func (o *UsageResponse) HasLookupLimit() bool {
	if o != nil && !IsNil(o.LookupLimit) {
		return true
	}

	return false
}

// SetLookupLimit gets a reference to the given int32 and assigns it to the LookupLimit field.
func (o *UsageResponse) SetLookupLimit(v int32) {
	o.LookupLimit = &v
}

// GetRequestHits returns the RequestHits field value if set, zero value otherwise.
func (o *UsageResponse) GetRequestHits() int32 {
	if o == nil || IsNil(o.RequestHits) {
		var ret int32
		return ret
	}
	return *o.RequestHits
}

// GetRequestHitsOk returns a tuple with the RequestHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResponse) GetRequestHitsOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestHits) {
		return nil, false
	}
	return o.RequestHits, true
}

// HasRequestHits returns a boolean if a field has been set.
func (o *UsageResponse) HasRequestHits() bool {
	if o != nil && !IsNil(o.RequestHits) {
		return true
	}

	return false
}

// SetRequestHits gets a reference to the given int32 and assigns it to the RequestHits field.
func (o *UsageResponse) SetRequestHits(v int32) {
	o.RequestHits = &v
}

// GetLookupHits returns the LookupHits field value if set, zero value otherwise.
func (o *UsageResponse) GetLookupHits() int32 {
	if o == nil || IsNil(o.LookupHits) {
		var ret int32
		return ret
	}
	return *o.LookupHits
}

// GetLookupHitsOk returns a tuple with the LookupHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageResponse) GetLookupHitsOk() (*int32, bool) {
	if o == nil || IsNil(o.LookupHits) {
		return nil, false
	}
	return o.LookupHits, true
}

// HasLookupHits returns a boolean if a field has been set.
func (o *UsageResponse) HasLookupHits() bool {
	if o != nil && !IsNil(o.LookupHits) {
		return true
	}

	return false
}

// SetLookupHits gets a reference to the given int32 and assigns it to the LookupHits field.
func (o *UsageResponse) SetLookupHits(v int32) {
	o.LookupHits = &v
}

func (o UsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestLimit) {
		toSerialize["request_limit"] = o.RequestLimit
	}
	if !IsNil(o.LookupLimit) {
		toSerialize["lookup_limit"] = o.LookupLimit
	}
	if !IsNil(o.RequestHits) {
		toSerialize["request_hits"] = o.RequestHits
	}
	if !IsNil(o.LookupHits) {
		toSerialize["lookup_hits"] = o.LookupHits
	}
	return toSerialize, nil
}

type NullableUsageResponse struct {
	value *UsageResponse
	isSet bool
}

func (v NullableUsageResponse) Get() *UsageResponse {
	return v.value
}

func (v *NullableUsageResponse) Set(val *UsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageResponse(val *UsageResponse) *NullableUsageResponse {
	return &NullableUsageResponse{value: val, isSet: true}
}

func (v NullableUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


