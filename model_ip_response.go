/*
IPDetective API

IPDetective API IP bot detection and IP geolocation

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emaildetective

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IPResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPResponse{}

// IPResponse struct for IPResponse
type IPResponse struct {
	Ip string `json:"ip"`
	Bot bool `json:"bot"`
	Type *string `json:"type,omitempty"`
	Asn *int32 `json:"asn,omitempty"`
	AsnDescription *string `json:"asn_description,omitempty"`
	CountryCode *string `json:"country_code,omitempty"`
	CountryName *string `json:"country_name,omitempty"`
}

type _IPResponse IPResponse

// NewIPResponse instantiates a new IPResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPResponse(ip string, bot bool) *IPResponse {
	this := IPResponse{}
	this.Ip = ip
	this.Bot = bot
	return &this
}

// NewIPResponseWithDefaults instantiates a new IPResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPResponseWithDefaults() *IPResponse {
	this := IPResponse{}
	return &this
}

// GetIp returns the Ip field value
func (o *IPResponse) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *IPResponse) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *IPResponse) SetIp(v string) {
	o.Ip = v
}

// GetBot returns the Bot field value
func (o *IPResponse) GetBot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bot
}

// GetBotOk returns a tuple with the Bot field value
// and a boolean to check if the value has been set.
func (o *IPResponse) GetBotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bot, true
}

// SetBot sets field value
func (o *IPResponse) SetBot(v bool) {
	o.Bot = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IPResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IPResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IPResponse) SetType(v string) {
	o.Type = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *IPResponse) GetAsn() int32 {
	if o == nil || IsNil(o.Asn) {
		var ret int32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPResponse) GetAsnOk() (*int32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *IPResponse) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int32 and assigns it to the Asn field.
func (o *IPResponse) SetAsn(v int32) {
	o.Asn = &v
}

// GetAsnDescription returns the AsnDescription field value if set, zero value otherwise.
func (o *IPResponse) GetAsnDescription() string {
	if o == nil || IsNil(o.AsnDescription) {
		var ret string
		return ret
	}
	return *o.AsnDescription
}

// GetAsnDescriptionOk returns a tuple with the AsnDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPResponse) GetAsnDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AsnDescription) {
		return nil, false
	}
	return o.AsnDescription, true
}

// HasAsnDescription returns a boolean if a field has been set.
func (o *IPResponse) HasAsnDescription() bool {
	if o != nil && !IsNil(o.AsnDescription) {
		return true
	}

	return false
}

// SetAsnDescription gets a reference to the given string and assigns it to the AsnDescription field.
func (o *IPResponse) SetAsnDescription(v string) {
	o.AsnDescription = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *IPResponse) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPResponse) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *IPResponse) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *IPResponse) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *IPResponse) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPResponse) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *IPResponse) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *IPResponse) SetCountryName(v string) {
	o.CountryName = &v
}

func (o IPResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["bot"] = o.Bot
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.AsnDescription) {
		toSerialize["asn_description"] = o.AsnDescription
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["country_name"] = o.CountryName
	}
	return toSerialize, nil
}

func (o *IPResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"bot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPResponse := _IPResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIPResponse)

	if err != nil {
		return err
	}

	*o = IPResponse(varIPResponse)

	return err
}

type NullableIPResponse struct {
	value *IPResponse
	isSet bool
}

func (v NullableIPResponse) Get() *IPResponse {
	return v.value
}

func (v *NullableIPResponse) Set(val *IPResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIPResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIPResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPResponse(val *IPResponse) *NullableIPResponse {
	return &NullableIPResponse{value: val, isSet: true}
}

func (v NullableIPResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


